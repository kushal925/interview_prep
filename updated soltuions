. Find Maximum and Minimum in an Array
Problem:
Given an array of n integers, find the maximum and minimum elements.

Example:
Input: [2, 5, 1, 7, 3]
Output: Max = 7, Min = 1

âœ… Try solving it using a simple loop (no built-in functions).

def find_max_min(arr):
    max_val = arr[0]
    min_val = arr[0]
    
    for num in arr:
        if num > max_val:
            max_val = num
        if num < min_val:
            min_val = num
            
    return max_val, min_val

# Example
arr = [2, 5, 1, 7, 3]
max_val, min_val = find_max_min(arr)
print("Max =", max_val)
print("Min =", min_val)

Reverse the Array
Problem:
Reverse the given array in-place (without using another array).

Example:
Input: [1, 2, 3, 4, 5]
Output: [5, 4, 3, 2, 1]

ðŸ’¡ Use two-pointer approach: start and end pointers swapping elements.

def reverse_array(arr):
    start = 0
    end = len(arr) - 1
    
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
    
    return arr

# Example
arr = [1, 2, 3, 4, 5]
print("Reversed Array:", reverse_array(arr))

. Check if Array is Sorted
Problem:
Check whether the given array is sorted in non-decreasing order.

Example:
Input: [1, 2, 2, 4, 5] â†’ Output: Yes
Input: [5, 3, 2, 1] â†’ Output: No

ðŸ‘€ Loop through and compare each a[i] with a[i+1]

def is_sorted(arr):
    for i in range(len(arr) - 1):
        if arr[i] > arr[i + 1]:
            return False
    return True

# Example
arr1 = [1, 2, 2, 4, 5]
arr2 = [5, 3, 2, 1]
print("Is arr1 sorted?", is_sorted(arr1))  # True
print("Is arr2 sorted?", is_sorted(arr2))  # False

OOPS CONCEPTS

Class
A class is like a blueprint for creating objects. It defines properties (variables) and methods (functions).

python
Copy
Edit
class Car:
    def __init__(self, brand, speed):
        self.brand = brand
        self.speed = speed

    def drive(self):
        print(f"{self.brand} is driving at {self.speed} km/h")


2. Object
An object is an instance of a class.

python
Copy
Edit
car1 = Car("BMW", 120)
car1.drive()  # Output: BMW is driving at 120 km/h


3. Inheritance
Allows a class (child) to inherit properties and methods from another class (parent).

python
Copy
Edit
class ElectricCar(Car):  # Inheriting from Car
    def charge(self):
        print("Charging...")

ecar = ElectricCar("Tesla", 150)
ecar.drive()
ecar.charge()


4. Polymorphism
Means same function name but different behavior depending on the object.

python
Copy
Edit
class Dog:
    def sound(self):
        print("Bark")

class Cat:
    def sound(self):
        print("Meow")

# Polymorphism in action
for animal in [Dog(), Cat()]:
    animal.sound()


5. Encapsulation
Hides the internal data of an object and only exposes what is necessary. We use getters and setters to access private data.

python
Copy
Edit
class Person:
    def __init__(self, age):
        self.__age = age  # Private variable

    def get_age(self):
        return self.__age

    def set_age(self, new_age):
        if new_age > 0:
            self.__age = new_age

p = Person(25)
print(p.get_age())
p.set_age(30)
print(p.get_age())


6. Abstraction
Hides complex implementation and only shows the essential details.

python
Copy
Edit
from abc import ABC, abstractmethod

class Shape(ABC):  # Abstract Base Class
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def area(self):
        print("Area = Ï€rÂ²")

c = Circle()
c.area()
Let me know if you want this in Java too, or need a short note format for your GitHub!













